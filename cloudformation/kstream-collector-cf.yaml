AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: >
  Cloudformation Template to create an infrastructure to collect mobile app click streams and geolocations

Parameters:
  CodeS3Bucket:
    Type: String
    Default: src-code-bucket
    Description: S3 Bucket of the source package
  LambdaCodeFolder:
    Type: String
    Default: lambda-codes
    Description: Folder inside S3 Bucket to store Lambda and other source codes
  VpcId:
    Type: String
    Default: NO_VPC
    Description: VPC ID; If no VPC is provided, set NO_VPC
  VpcELBSubnets:
    Type: String
    Default: NOT_DEFINED_ELB
    Description: VPC ELB Subnets
  DataDestS3Bucket:
    Type: String
    Description: S3 Bucket of Data Destination
  DataDestS3Prefix:
    Type: String
    Description: S3 Prefix of Data Destination

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "poc-kstream-lambda-role"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonKinesisFullAccess
      Path: /
  LambdaRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "poc-kstream-lambda-role-policy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'firehose:DeleteDeliveryStream'
              - 'firehose:PutRecord'
              - 'firehose:PutRecordBatch'
              - 'firehose:UpdateDestination'
            Resource: !GetAtt KStreamFirehose.Arn
      Roles:
        - !Ref LambdaRole      
  ClickStreamCollector:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "poc-kstream-collector"
      Handler: lambda_function.lambda_handler
      Role: 
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: python3.8
      CodeUri: 
        Bucket: !Sub "${CodeS3Bucket}"
        Key: !Sub "${LambdaCodeFolder}/poc-kstream-collector.zip"
      Timeout: 3
      MemorySize: 128          
      Environment:
        Variables:
          REGION_NAME: !Sub "${AWS::Region}"
          KSTREAM_FIREHOSE: !Ref KStreamFirehose
      Tags:
        dtap: "POC"
        application: kstream-collector
        stack: !Sub "${AWS::StackName}"
  ClickStreamCollectorLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ClickStreamCollector.Arn
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http on port 80
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  KStreamLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing 
      Subnets: !Split [ "," , !Ref VpcELBSubnets ]
      SecurityGroups: [!Ref AlbSecurityGroup]
  KStreamTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ClickStreamCollectorLambdaPermission
    Properties:
      TargetType: lambda
      Targets:
        - Id: !GetAtt ClickStreamCollector.Arn
  KStreamHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref KStreamLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "application/json"
            MessageBody: "{\"response_code\":\"404\", \"message\": \"Resource not found.\"}"
            StatusCode: 404   
  KStreamListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref KStreamTargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/poc-kstream/*"
        - Field: http-request-method
          HttpRequestMethodConfig:
            Values:
              - POST
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: client_id
            Values:
              - touchwood-app
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: Authorization
            Values:
              - "Bearer *"
      ListenerArn: !Ref KStreamHttpsListener
      Priority: 1
  KStreamListenerOptionsRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref KStreamTargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/poc-kstream/*"
        - Field: http-request-method
          HttpRequestMethodConfig:
            Values:
              - OPTIONS
      ListenerArn: !Ref KStreamHttpsListener
      Priority: 2      

  FirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
  FirehoseRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref DataDestS3Bucket
                  - '*'
      Roles:
        - !Ref FirehoseRole
  KStreamFirehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      S3DestinationConfiguration:
        BucketARN: !Join ["", ["arn:aws:s3:::", !Ref DataDestS3Bucket]]
        BufferingHints:
          IntervalInSeconds: '60'
          SizeInMBs: '50'
        CompressionFormat: UNCOMPRESSED
        Prefix: !Ref DataDestS3Prefix
        RoleARN: !GetAtt FirehoseRole.Arn

Outputs:
  DNSName:
    Value: !GetAtt KStreamLoadBalancer.DNSName
